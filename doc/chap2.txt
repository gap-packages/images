  
  [1X2 [33X[0;0YMinimal and Canonical Images[133X[101X
  
  [33X[0;0YGiven a group G and action A, we can define the minimal image of an object O
  as  the smallest image of O under any element of G, under the action A. As a
  more  concrete  example,  let  us  consider  the  minimal  image  of the set
  [2,3,5,7]  under a group G. We can first calculate all the images of our set
  under G, then choose the smallest one.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XG := Group((1,2,3)(4,5,6)(7,8,9),(1,4,7)(2,5,8)(3,6,9));;[127X[104X
    [4X[25Xgap>[125X [27XList(G, g -> OnSets([2,3,5,7], g) );[127X[104X
    [4X[28X[ [ 2, 3, 5, 7 ], [ 1, 2, 4, 9 ], [ 1, 3, 6, 8 ], [ 2, 4, 8, 9 ],[128X[104X
    [4X[28X  [ 1, 6, 7, 8 ], [ 3, 5, 7, 9 ], [ 1, 5, 6, 8 ], [ 3, 4, 5, 7 ],[128X[104X
    [4X[28X  [ 2, 4, 6, 9 ] ][128X[104X
    [4X[25Xgap>[125X [27XMinimum(List(G, g -> OnSets([2,3,5,7], g) ) );[127X[104X
    [4X[28X[ 1, 2, 4, 9 ][128X[104X
  [4X[32X[104X
  
  [33X[0;0YWhile  this  produces  the  correct  answer,  it  is very inefficient, as it
  requires  enumerating  all  members  of  G.  The  images  package produces a
  function MinimalImage, which performs this same operation, more efficiently.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XLoadPackage("images", false);[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27XMinimalImage(G, [2,3,5,7], OnSets);[127X[104X
    [4X[28X[ 1, 2, 4, 9 ][128X[104X
  [4X[32X[104X
  
  [33X[0;0YOften,   MinimalImage  is  used  in  practice  to  categories  objects  into
  equivalence  classes.  For  example,  this  next example shows [2,3,5,7] and
  [1,6,7,8]  are  in  the  same  orbit,  which  is  different  to the orbit of
  [3,5,7,8].[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XMinimalImage(G, [2,3,5,7], OnSets);[127X[104X
    [4X[28X[ 1, 2, 4, 9 ][128X[104X
    [4X[25Xgap>[125X [27XMinimalImage(G, [1,6,7,8], OnSets);[127X[104X
    [4X[28X[ 1, 2, 4, 9 ][128X[104X
    [4X[25Xgap>[125X [27XMinimalImage(G, [3,5,7,8], OnSets);[127X[104X
    [4X[28X[ 1, 2, 6, 8 ][128X[104X
  [4X[32X[104X
  
  [33X[0;0YMotivated  by  this,  we  can define a canonicalising function C(G,O,A) as a
  function  which  returns  A(O,g)  for  some  g  in  G, under the restriction
  C(G,O1,A)  =  C(G,O2,A)  if  there  exists  h in G such that A(O1,h)=O2. The
  reason  to  define  a  CanonicalImage  at  all is that it is often much more
  efficient  to  calculate  a  canonical image, rather than the minimal image,
  particularly  as  groups  get larger. CanonicalImage is used the same way as
  MinimalImage.  [12XWARNING:[112X  The  value  of MinimalImage should remain identical
  between  versions  of  GAP  and the Images package, but this is NOT true for
  CanonicalImage. Please read the section "Repeatable Canonical Images" if you
  plan on storing the canonical images generated by the Images package.[133X
  
  
  [1X2.1 [33X[0;0YFunction documentation[133X[101X
  
  [1X2.1-1 MinimalImage[101X
  
  [29X[2XMinimalImage[102X( [3XG[103X[, [3Xpnt[103X][, [3Xact[103X][, [3XConfig[103X] ) [32X function
  [29X[2XIsMinimalImage[102X( [3XG[103X[, [3Xpnt[103X][, [3Xact[103X][, [3XConfig[103X] ) [32X function
  [29X[2XMinimalImagePerm[102X( [3XG[103X[, [3Xpnt[103X][, [3Xact[103X][, [3XConfig[103X] ) [32X function
  
  [33X[0;0Y[2XMinimalImage[102X   returns   the  minimal  image  of  [3Xpnt[103X  under  the  group  [3XG[103X.
  [2XIsMinimalImage[102X  returns a boolean which is [9Xtrue[109X if [2XMinimalImage[102X would return
  [3Xpnt[103X (so the value is it's own minimal image).[133X
  
  [33X[0;0Y[2XMinimalImagePerm[102X  returns  the  permutation  which  maps  [3Xpnt[103X to its minimal
  image.[133X
  
  [33X[0;0YThe  option  [3XConfig[103X  defines  a  number of advanced configuration Â  options,
  which are described in 'AdvancedConfig'.[133X
  
