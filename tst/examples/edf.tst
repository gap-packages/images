# External Difference Families are a sets of sets of members of a group.
# Equivalence of EDFs in a group G is generated by:
gap> LoadPackage("images", false);
true
gap> EDFSymGroup := function(l,g)
>     local gens,n;
>     n := Length(l);
>     gens := [];
>     # Automorphism Group of G
>     Append(gens, List(GeneratorsOfGroup(AutomorphismGroup(g)),
>                               gen -> PermList(List([1..n], z -> Position(l, Image(gen,l[z]))))));
>     # G acting on itself from the left
>     Append(gens, List([1..n], i -> PermList(List([1..n], z -> Position(l, l[i]*l[z])))));
>     # G acting on itself from the right
>     Append(gens, List([1..n], i -> PermList(List([1..n], z -> Position(l, l[z]*l[i])))));
>     # G acting on itself by conjugation
>     Append(gens, List([1..n], i -> PermList(List([1..n], z -> Position(l, l[z]^l[i])))));
>     return Group(gens);
> end;;
gap> g := DihedralGroup(140);;
gap> l := Set(g);;
gap> syms := EDFSymGroup(l, g);;
gap> Size(syms);
235200

# We genreate many EDFs using computational search, but these EDFs need checking for equivalence:
# Note: This is not a true EDF, just an array to use as an example!
gap> exampleedf := [ [2,4,6,8], [12,14,16,18], [23,27,29,37]];;
gap> comb := Combinatorial.Set(List(exampleedf, Combinatorial.Set));;
gap> CanonicalImagePerm(syms, comb);
(1,104,98,84,80,65,23,64,41,6,11,27)(2,75,88,20,8,3,30,35,32,55,48,74)(4,101,
99,62,24,42)(5,15,39,103)(7,72,89,124,69,92)(9,90,36,16)(10,68,112,50,95,122,
94,18,21,107,54,70)(12,129,40,82,59,117)(13,45,115,119,25,85,58,14,60,28,78,
44)(17,110,31,134,108,33)(19,87,109,120,73,67,71,46,53,29,123,138)(22,136,37,
83,38,61,113,102,77,128,126,130)(26,57,100,56,118,114,81,135,43,97,140,76)(34,
121,51,131,111,132,91,86,125,47,139,105)(49,52)(63,127,116,96)(66,93,106,
133)(79,137)

# Let's check if this is equivalent to some other EDFs:
gap> cand2 := [ [ 1, 61, 75, 113 ], [ 14, 21, 28, 59 ], [ 25, 80, 116, 124 ] ];;
gap> cand2 := Combinatorial.Set(List(cand2, Combinatorial.Set));;
gap> cand3 := [ [ 17, 88, 105, 108 ], [ 21, 45, 52, 82 ], [ 54, 57, 100, 111 ] ];;
gap> cand3 := Combinatorial.Set(List(cand3, Combinatorial.Set));;
gap> con  := CanonicalImage(syms, comb);
collection:[ collection:[ 1, 64, 83, 123 ] of type set, 
  collection:[ 3, 11, 75, 101 ] of type set, 
  collection:[ 9, 21, 60, 129 ] of type set ] of type set
gap> con2 := CanonicalImage(syms, cand2);
collection:[ collection:[ 1, 64, 83, 123 ] of type set, 
  collection:[ 3, 11, 75, 101 ] of type set, 
  collection:[ 9, 21, 60, 129 ] of type set ] of type set
gap> con3 := CanonicalImage(syms, cand3);
collection:[ collection:[ 1, 31, 58, 121 ] of type set, 
  collection:[ 16, 57, 93, 96 ] of type set, 
  collection:[ 28, 43, 104, 140 ] of type set ] of type set
gap> con = con2;
true
gap> con = con3;
false
